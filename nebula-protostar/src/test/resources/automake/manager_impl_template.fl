/**
 * Copyright (c) 2012 Baozun All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Baozun.
 * You shall not disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Baozun.
 *
 * BAOZUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
 * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. BAOZUN SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 *
 */
package com.baozun.nebula.sdk.manager.impl;

import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import loxia.dao.Pagination;
import loxia.dao.Sort;
import loxia.dao.Page;
import com.baozun.nebula.model.${packagName}.${entityName};
import com.baozun.nebula.sdk.manager.Sdk${entityName}Manager;
import com.baozun.nebula.dao.${packagName}.${entityName}Dao;

 <#assign daovar =  "${entityName[0]?lower_case}${entityName[1..]}Dao" />
/**
 * ${entityName}Manager
 * @author  ${authName}
 *
 */
@Transactional
@Service("sdk${entityName}Manager") 
public class Sdk${entityName}ManagerImpl implements Sdk${entityName}Manager {

	@Autowired
	private ${entityName}Dao ${daovar};


	/**
	 * 保存${entityName}
	 * 
	 */
	public ${entityName} save${entityName}(${entityName} model){
	
		return ${daovar}.save(model);
	}
	
	/**
	 * 通过id获取${entityName}
	 * 
	 */
	public ${entityName} find${entityName}ById(Long id){
	
		return ${daovar}.getByPrimaryKey(id);
	}

	/**
	 * 获取所有${entityName}列表
	 * @return
	 */
	public List<${entityName}> findAll${entityName}List(){
	
		return ${daovar}.findAll${entityName}List();
	};
	
	/**
	 * 通过ids获取${entityName}列表
	 * @param ids
	 * @return
	 */
	public List<${entityName}> find${entityName}ListByIds(List<Long> ids){
	
		return ${daovar}.find${entityName}ListByIds(ids);
	};
	
	/**
	 * 通过参数map获取${entityName}列表
	 * @param paraMap
	 * @return
	 */
	public List<${entityName}> find${entityName}ListByQueryMap(Map<String, Object> paraMap){
	
		return ${daovar}.find${entityName}ListByQueryMap(paraMap);
	};
	
	/**
	 * 分页获取${entityName}列表
	 * @param start
	 * @param size
	 * @param paraMap
	 * @param sorts 
	 * @return
	 */
	public Pagination<${entityName}> find${entityName}ListByQueryMapWithPage(Page page,Sort[] sorts,Map<String, Object> paraMap){
	
		return ${daovar}.find${entityName}ListByQueryMapWithPage(page,sorts,paraMap);
	};
	
	
	<#if lifecycle !="">
	
	/**
	 * 通过ids批量启用或禁用${entityName}
	 * 设置${lifecycle} =0 或 1
	 * @param ids
	 * @return
	 */
	public void enableOrDisable${entityName}ByIds(List<Long> ids,Integer state){
		${daovar}.enableOrDisable${entityName}ByIds(ids,state);
	}
	
	/**
	 * 通过ids批量删除${entityName}
	 * 设置${lifecycle} =2
	 * @param ids
	 * @return
	 */
	public void remove${entityName}ByIds(List<Long> ids){
		${daovar}.remove${entityName}ByIds(ids);
	}
	
	
	/**
	 * 获取有效的${entityName}列表
	 * ${lifecycle} =1
	 * @param ids
	 * @return
	 */
	public List<${entityName}> findAllEffect${entityName}List(){
	
		return ${daovar}.findAllEffect${entityName}List();
	};
	
	/**
	 * 通过参数map获取有效的${entityName}列表
	 * 强制加上${lifecycle} =1
	 * @param paraMap
	 * @return
	 */
	public List<${entityName}> findEffect${entityName}ListByQueryMap(Map<String, Object> paraMap){
	
		return ${daovar}.findEffect${entityName}ListByQueryMap(paraMap);
	};
	
	/**
	 * 分页获取有效的${entityName}列表
	 * 强制加上${lifecycle} =1
	 * @param start
	 * @param size
	 * @param paraMap
	 * @param sorts 
	 * @return
	 */
	
	public Pagination<${entityName}> findEffect${entityName}ListByQueryMapWithPage(Page page,Sort[] sorts,Map<String, Object> paraMap){
	
		return ${daovar}.findEffect${entityName}ListByQueryMapWithPage(page,sorts,paraMap);
	};
	
	</#if>
	
}
