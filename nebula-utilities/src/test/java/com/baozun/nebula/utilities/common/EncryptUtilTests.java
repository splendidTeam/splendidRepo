/**
 * Copyright (c) 2012 Baozun All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Baozun.
 * You shall not disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Baozun.
 *
 * BAOZUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
 * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. BAOZUN SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 *
 */
package com.baozun.nebula.utilities.common;

import org.testng.annotations.Test;

import com.baozun.nebula.utilities.common.encryptor.AESEncryptor;
import com.baozun.nebula.utilities.common.encryptor.EncryptionException;

public class EncryptUtilTests {

	@Test
	public void testHash() throws Exception{
		String hash = EncryptUtil.getInstance().hash("what's the FUCK", "salt");
		assert hash != null : "Failure";
		System.out.println(hash);
		assert hash.equals(EncryptUtil.getInstance().hash("what's the FUCK", "salt")) : "Hash value is not the same.";
		assert !hash.equals(EncryptUtil.getInstance().hash("what's the FUCK", "salt",900)) : 
			"Hash value should be different due to the different iteration setting.";
	}
	
	@Test
	public void testEncrypt() throws Exception{
		String plainText="Base64是一种基于64个可打印字符来表示二进制数据的表示方法。";
		String cipherText = EncryptUtil.getInstance().encrypt(plainText);
		System.out.println("Cipher:" + cipherText);
		String decipherText = EncryptUtil.getInstance().decrypt(cipherText);
		System.out.println("Decipher:" + decipherText);
		assert plainText.equals(decipherText) : "Encrypt is not correct";
	}
	
	@Test
	public void testEncryptionWithRSA() throws Exception{
		String plainText="Base64是一种基于64个可打印字符来表示二进制数据的表示方法。";
		String cipherText = EncryptUtil.getInstance().encrypt(plainText,"RSA");
		System.out.println("Cipher:" + cipherText);
		String decipherText = EncryptUtil.getInstance().decrypt(cipherText,"RSA");
		System.out.println("Decipher:" + decipherText);
		assert plainText.equals(decipherText) : "Encrypt is not correct";
	}
	
	@Test
	public void testDigest() throws Exception{
		String digest = EncryptUtil.getInstance().digest("Base64是一种基于64个可打印字符来表示二进制数据的表示方法。");
		assert digest != null : "Failure";
		System.out.println(digest);
		assert digest.equals(EncryptUtil.getInstance().digest("Base64是一种基于64个可打印字符来表示二进制数据的表示方法。")) : 
			"Hash value is not the same.";
	}
	
	
	@Test
	public void testBase64()throws Exception{
		//String pass=EncryptUtil.getInstance().base64Encode("Base64是一种基于64个");
		//System.out.println(pass);
		//System.out.println(EncryptUtil.getInstance().base64Decode(pass));
		String str="";
		System.out.println(EncryptUtil.getInstance().base64Decode(str));
	}
	
	public static void main(String[] args) throws Exception{
		String str="eyJoZWFkIjp7Im1zZ0lkIjoiMTA2OTQiLCJpZklkZW50aWZ5IjoiSTEtMSIsInNob3AiOiLph5Hlrp3otJ3lrpjmlrnllYbln44iLCJpZlZlcnNpb24iOiI1LjAiLCJtc2dTZW5kVGltZSI6IjIwMTQtMDctMTUgMTE6MTg6MzQgODkyIiwiYWNjb3VudCI6IkdZTUJPUkVFLUJTIiwic2lnbiI6IlgyNzhrK2NCNS9nNEExNjh6WmJjdE9PSTZsZ09TT1Z2dVlNNUxRQWRLZ2VPY1JveEMvcGZDR3J3cW5OVmNKWE5LYllaQ3JsSzllK29admZubnViNkdnPT0ifSwiYm9keSI6eyJtc2dDb250ZW50IjoiSElYWXJIVUVpS0JVUHRNZDcwNWx3U1BCMThMaWE1c3MyakY4VE1ORUF1ODRXTldELzN5N1RDYWEveWxaR2JheW1HaEQrQVRVUDlGeHBuMms2UTNnMEFlY3E2OWhmVTdOM3oybHhjaXhNZ1JIYWdKMXBCY3lrMWVuY1NGUStkSnVJT2ZQczNzeFJyc1QrVDBYTE1wcTl3MldGM3c0YzgvUkJnNE5qUU5hblFnUHN1VTZmcXdQZWZ0Tmw1VkpvSUc0NEVNMVlEZHM1WUJOdGZXaFFjOGJseGpEU0M4UUlheFVEVFZDcEFvL1dDQzQwZlpyU21FWnZjMjNDb3BwdWsyNW93SFZxbU03clB3QzJpRjVHa1ppc0ZNMGNBQncyUTcxaER2a3dLQ1N4VHhZWXU0Z3ZuaEhSVWhRZkszVUx4SkVydEFkdnlBUXFuQ2Q0cElFU3Rkb3BsMXUrb2FFV1ZYeVVmc0xsUW1qNXhOTDJaMjNSR3BPTXV4OWEySmFpM0EvM1JmaFpycjB1eGJsT0RranhQcjVaS1BYMFNpTkZTNW9HL0I3dm4rVm42aVkybGhWYTdRTUpndUpvNWVRaW5KUFd3WmRPdDIrR1JqeHk2Umo3di9BTlhNVFRhOXFsZVhySzMrbzNKR2swOEtGeFhKK0pGTVdZcktBNisvWVRBUzUzWUlGODBJakhyRTg2Wi9SbVZ2UjNZMUUxNGVyMTF0WGhyR0NQaTl1cmZjUXVXZFVXYVd6QlRhMDVVblJHYnRQIn19";
		String base64r=EncryptUtil.getInstance().base64Decode(str);
		System.out.println(base64r);
		base64r="HIXYrHUEiKBUPtMd705lwSPB18Lia5ss2jF8TMNEAu84WNWD/3y7TCaa/ylZGbaymGhD+ATUP9Fxpn2k6Q3g0Aecq69hfU7N3z2lxcixMgRHagJ1pBcyk1encSFQ+dJuIOfPs3sxRrsT+T0XLMpq9w2WF3w4c8/RBg4NjQNanQgPsuU6fqwPeftNl5VJoIG44EM1YDds5YBNtfWhQc8blxjDSC8QIaxUDTVCpAo/WCC40fZrSmEZvc23Coppuk25owHVqmM7rPwC2iF5GkZisFM0cABw2Q71hDvkwKCSxTxYYu4gvnhHRUhQfK3ULxJErtAdvyAQqnCd4pIEStdopl1u+oaEWVXyUfsLlQmj5xNL2Z23RGpOMux9a2Jai3A/3RfhZrr0uxblODkjxPr5ZKPX0SiNFS5oG/B7vn+Vn6iY2lhVa7QMJguJo5eQinJPWwZdOt2+GRjxy6Rj7v/ANXMTTa9qleXrK3+o3JGk08KFxXJ+JFMWYrKA6+/YTAS53YIF80IjHrE86Z/RmVvR3Y1E14er11tXhrGCPi9urfcQuWdUWaWzBTa05UnRGbtP";
		System.out.println(EncryptUtil.getInstance().decrypt(base64r,"cm9va2llLS13b3JtaG9sZQ=="));
	}
}
